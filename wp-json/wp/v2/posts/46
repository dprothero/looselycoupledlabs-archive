{"id":46,"date":"2014-07-09T01:09:17","date_gmt":"2014-07-09T01:09:17","guid":{"rendered":"http:\/\/looselycoupledlabs.com\/?p=46"},"modified":"2014-07-09T04:28:42","modified_gmt":"2014-07-09T04:28:42","slug":"creating-a-rabbitmq-cluster-for-use-with-masstransit","status":"publish","type":"post","link":"https:\/\/looselycoupledlabs.com\/2014\/07\/creating-a-rabbitmq-cluster-for-use-with-masstransit\/","title":{"rendered":"Creating a RabbitMQ Cluster for Use with MassTransit"},"content":{"rendered":"<p>In my last post,\u00a0<a title=\"A Simple MassTransit Publish\/Subscribe Example\" href=\"http:\/\/looselycoupledlabs.com\/2014\/06\/masstransit-publish-subscribe-example\/\">A Simple MassTransit Publish\/Subscribe Example<\/a>, we looked at how to build basic publishers and subscribers using\u00a0<a href=\"http:\/\/masstransit-project.com\/\" target=\"_blank\">MassTransit<\/a>\u00a0and\u00a0<a href=\"http:\/\/www.rabbitmq.com\/\" target=\"_blank\">RabbitMQ<\/a>. In the example, however, we were only using a single RabbitMQ instance on a single machine. In the real world, your publishers are most likely to live on separate machines from your subscribers. To do that, we need to set up a RabbitMQ cluster.<\/p>\n<h1>RabbitMQ Clustering<\/h1>\n<p>A RabbitMQ cluster (or\u00a0<em>broker<\/em>) can consist of multiple nodes, each running an instance of the RabbitMQ application. All of the nodes will share configuration information, such as users, exchanges, and queues. Recall from our\u00a0<a title=\"A Simple MassTransit Publish\/Subscribe Example\" href=\"http:\/\/looselycoupledlabs.com\/2014\/06\/masstransit-publish-subscribe-example\/\" target=\"_blank\">last discussion<\/a>\u00a0that an exchange is like a post office and a queue is like an actual mailbox containing the resting place of messages. The actual queue, or mailbox, only lives on the node where the queue was created, but the knowledge of the queue&#8217;s existence is shared by the cluster, as is the full routing information contained in the exchanges. (Note that queues can be replicated for high-availability requirements, which we may cover in a future post.)<\/p>\n<h2>A Common Clustering Pattern<\/h2>\n<p>A pattern I like to use for clustering RabbitMQ nodes is to have a node live on each machine that participates in the overall application. For example, I will install instances of RabbitMQ on each web server that makes up a web application and will be publishing messages related to the application. Then, I will install an instance of RabbitMQ on each machine that will be running a service that will subscribe to the messages. The diagram below illustrates this pattern.<\/p>\n<p><a href=\"http:\/\/www.lucidchart.com\/invitations\/accept\/a3a1a30a-0072-4437-9945-7cdaca22add0\" target=\"_blank\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-80\" src=\"http:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/RabbitMQ-Cluster-Diagram-New-Page.png\" alt=\"RabbitMQ Cluster Diagram\" width=\"800\" height=\"460\" srcset=\"https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/RabbitMQ-Cluster-Diagram-New-Page.png 800w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/RabbitMQ-Cluster-Diagram-New-Page-300x172.png 300w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/RabbitMQ-Cluster-Diagram-New-Page-150x86.png 150w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/RabbitMQ-Cluster-Diagram-New-Page-400x230.png 400w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/RabbitMQ-Cluster-Diagram-New-Page-200x115.png 200w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/a><\/p>\n<h1>Setting Up the Cluster<\/h1>\n<p>For the purposes of this example, we are going to assume you have two Windows machines (virtual or otherwise) named Publisher and Subscriber. Install RabbitMQ on each of these machines, referring to the installation instructions in my\u00a0<a title=\"A Simple MassTransit Publish\/Subscribe Example\" href=\"http:\/\/looselycoupledlabs.com\/2014\/06\/masstransit-publish-subscribe-example\/\" target=\"_blank\">previous blog post<\/a>.<\/p>\n<h2>Erlang Cookie<\/h2>\n<p>The first thing that needs to be done is to set up the Erlang cookie on each machine so that the cookies\u00a0are the same. (Remember, RabbitMQ is an Erlang application.) ASP.NET developers may be familiar with the concept of creating a common Machine Key for a cluster of web servers. The Erlang cookie is a corollary to this process. It is a key that indicates that the multiple Erlang nodes can communicate with each other. All the nodes in a RabbitMQ cluster must have the same Erlang cookie.<\/p>\n<p>When installing Erlang on Windows and installing RabbitMQ as a Windows Service, the Erlang cookie is placed in two locations \u2013 <strong>C:\\Users\\<em>Current User\u00a0<\/em><\/strong>and\u00a0<strong>C:\\Windows<\/strong>. The\u00a0<a href=\"http:\/\/www.rabbitmq.com\/clustering.html\" target=\"_blank\">RabbitMQ clustering guide<\/a>\u00a0recommends making sure all of the cookies on the machine are the same. Copy the cookie from\u00a0<strong>C:\\Windows <\/strong>on the Publisher machine to\u00a0<strong>C:\\Users\\<em>Current User\u00a0<\/em><\/strong>on the same machine\u00a0and then to both\u00a0<strong>C:\\Users\\<em>Current User\u00a0<\/em><\/strong>and\u00a0<strong>C:\\Windows\u00a0<\/strong>on the Subscriber machine. All four cookies should have identical content (you can inspect with Notepad to be sure).<\/p>\n<p>Restart the RabbitMQ service on both machines.<\/p>\n<h2>Final Cluster Setup<\/h2>\n<p>If you&#8217;ve got the Windows Firewall turned on, be sure to allow incoming TCP traffic on ports 4369 and 25672 on both the Publisher and Subscriber machines.<\/p>\n<p>Now, from the\u00a0<span style=\"text-decoration: underline;\">Subscriber<\/span>\u00a0machine, open up the\u00a0<span style=\"color: #444444;\">\u201cRabbitMQ Command Prompt (sbin dir)\u201d item (added by the RabbitMQ installer). Run the following commands:<\/span><\/p>\n<pre class=\"brush: ps; toolbar: false;\">&gt; rabbitmqctl stop_app\r\n&gt; rabbitmqctl join_cluster rabbit@Publisher<\/pre>\n<p>What we are doing here is telling the instance of RabbitMQ running on the Subscriber machine that we want to join a cluster that is hosted by the Publisher machine (which is currently a cluster of one). Restart the RabbitMQ Windows service after running this command.<\/p>\n<h2>Inspecting Your Cluster<\/h2>\n<p>Now, on either the Publisher or the Subscriber, open the web-based management console at\u00a0<a href=\"http:\/\/localhost:15672\/\" target=\"_blank\">http:\/\/localhost:15672\/<\/a>. (Recall from our\u00a0<a title=\"A Simple MassTransit Publish\/Subscribe Example\" href=\"http:\/\/looselycoupledlabs.com\/2014\/06\/masstransit-publish-subscribe-example\/\" target=\"_blank\">previous post<\/a>\u00a0that the web-based management console is a plugin we need to install.) On the first page, you will see the details of our newly created, multi-node cluster!<\/p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-74\" src=\"http:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster.png\" alt=\"rabbitmq-cluster\" width=\"151\" height=\"213\" srcset=\"https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster.png 151w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-150x211.png 150w\" sizes=\"(max-width: 151px) 100vw, 151px\" \/><\/p>\n<h1>MassTransit in Action<\/h1>\n<p>Now let&#8217;s put our cluster to the test. Build the\u00a0<a href=\"https:\/\/github.com\/dprothero\/MtPubSubExample\" target=\"_blank\">sample applications<\/a>\u00a0that we created in the\u00a0<a title=\"A Simple MassTransit Publish\/Subscribe Example\" href=\"http:\/\/looselycoupledlabs.com\/2014\/06\/masstransit-publish-subscribe-example\/\" target=\"_blank\">previous post<\/a>. Copy the contents of <strong>TestPublisher\\bin\\Debug<\/strong> to a folder on the Publisher. Likewise, copy the contents of <strong>TestSubscriber\\bin\\Debug<\/strong> to a folder on the Subscriber.<\/p>\n<p>Launch TestSubscriber.exe on the Subscriber machine first. Then, launch TestPublisher on the Publisher machine. Finally, send a message from the Publisher, and watch it appear on the Subscriber.<\/p>\n<p><img loading=\"lazy\" class=\"alignnone size-full wp-image-76\" src=\"http:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-example.png\" alt=\"rabbitmq-cluster-example\" width=\"694\" height=\"373\" srcset=\"https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-example.png 694w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-example-300x161.png 300w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-example-150x80.png 150w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-example-400x214.png 400w, https:\/\/looselycoupledlabs.com\/wp-content\/uploads\/2014\/07\/rabbitmq-cluster-example-200x107.png 200w\" sizes=\"(max-width: 694px) 100vw, 694px\" \/><\/p>\n<p>Notice how we didn&#8217;t have to modify any code in the sample application? This is because we set up the code to connect to RabbitMQ on localhost. Because each local instance of RabbitMQ on the two machines was part of a single cluster, they shared information about the exchanges and queues necessary to make the MassTransit service bus work its magic, as if there were only a single RabbitMQ instance!<\/p>\n<h1>What&#8217;s Next?<\/h1>\n<p>Next up, we&#8217;ll take a look at scaling this up to a real-world example. We&#8217;ll create an ASP.NET web application that can publish messages and a custom Windows service that can be our subscriber of the messages. Down the road, we&#8217;ll look at having multiple subscribers for the same message type in two different patterns: one for scaling out message processing and another for having different processing occur in separate Windows services.<\/p>\n<p>As always, please send your suggestions for things you&#8217;d like to learn how to do with MassTransit.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In my last post,\u00a0A Simple MassTransit Publish\/Subscribe Example, we looked at how to build basic publishers and subscribers using\u00a0MassTransit\u00a0and\u00a0RabbitMQ. In the example, however, we were only using a single RabbitMQ instance on a single machine. In the real world, your publishers are most likely to live on separate machines from your subscribers. To do that,&#8230; <a class=\"more-link\" href=\"https:\/\/looselycoupledlabs.com\/2014\/07\/creating-a-rabbitmq-cluster-for-use-with-masstransit\/\">Continue reading <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":78,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6],"tags":[2,3,4,5],"_links":{"self":[{"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/posts\/46"}],"collection":[{"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/comments?post=46"}],"version-history":[{"count":10,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/posts\/46\/revisions"}],"predecessor-version":[{"id":83,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/posts\/46\/revisions\/83"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/media\/78"}],"wp:attachment":[{"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/media?parent=46"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/categories?post=46"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/looselycoupledlabs.com\/wp-json\/wp\/v2\/tags?post=46"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}