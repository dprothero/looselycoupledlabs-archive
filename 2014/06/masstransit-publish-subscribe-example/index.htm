<!doctype html>

<html lang="en-US">
<head>
	<meta charset="UTF-8">
	
	
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

			    
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    
	<title>A Simple MassTransit Publish/Subscribe Example | Loosely Coupled Labs</title>
    
    <!--[if lte IE 9]>
        <script src="https://looselycoupledlabs.com/wp-content/themes/read-v4-2-4/js/html5shiv.js"></script>
        <script src="https://looselycoupledlabs.com/wp-content/themes/read-v4-2-4/js/selectivizr-min.js"></script>
    <![endif]-->
	
		
	<meta name='robots' content='max-image-preview:large'>
<link rel='dns-prefetch' href='//fonts.googleapis.com'>
<link rel='dns-prefetch' href='//s.w.org'>
<link rel="alternate" type="application/rss+xml" title="Loosely Coupled Labs &raquo; Feed" href="../../../feed/index.htm">
<link rel="alternate" type="application/rss+xml" title="Loosely Coupled Labs &raquo; Comments Feed" href="../../../comments/feed/index.htm">
<link rel="alternate" type="application/rss+xml" title="Loosely Coupled Labs &raquo; A Simple MassTransit Publish/Subscribe Example Comments Feed" href="feed/index.htm">
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/looselycoupledlabs.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.8.6"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([10084,65039,8205,55357,56613],[10084,65039,8203,55357,56613])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css' href='../../../wp-includes/css/dist/block-library/style.min.css?ver=5.8.6' type='text/css' media='all'>
<link rel='stylesheet' id='unifrakturmaguntia-css' href='../../../css?family=UnifrakturMaguntia&#038;subset=latin' type='text/css' media='all'>
<link rel='stylesheet' id='coustard-css' href='../../../css-1?family=Coustard&#038;subset=latin' type='text/css' media='all'>
<link rel='stylesheet' id='lora-css' href='../../../css-2?family=Lora:400,700,400italic,700italic&#038;subset=latin' type='text/css' media='all'>
<link rel='stylesheet' id='print-css' href='../../../wp-content/themes/read-v4-2-4/css/print.css' type='text/css' media='print'>
<link rel='stylesheet' id='grid-css' href='../../../wp-content/themes/read-v4-2-4/css/grid.css' type='text/css' media='all'>
<link rel='stylesheet' id='normalize-css' href='../../../wp-content/themes/read-v4-2-4/css/normalize.css' type='text/css' media='all'>
<link rel='stylesheet' id='font-awesome-css' href='../../../wp-content/themes/read-v4-2-4/css/font-awesome.css' type='text/css' media='all'>
<link rel='stylesheet' id='google-code-prettify-css' href='../../../wp-content/themes/read-v4-2-4/js/google-code-prettify/prettify.css' type='text/css' media='all'>
<link rel='stylesheet' id='uniform-css' href='../../../wp-content/themes/read-v4-2-4/css/uniform.default.css' type='text/css' media='all'>
<link rel='stylesheet' id='flexslider-css' href='../../../wp-content/themes/read-v4-2-4/css/flexslider.css' type='text/css' media='all'>
<link rel='stylesheet' id='mediaelementplayer-css' href='../../../wp-content/themes/read-v4-2-4/js/mediaelement/mediaelementplayer.css' type='text/css' media='all'>
<link rel='stylesheet' id='gamma-gallery-css' href='../../../wp-content/themes/read-v4-2-4/css/gamma-gallery.css' type='text/css' media='all'>
<link rel='stylesheet' id='main-css' href='../../../wp-content/themes/read-v4-2-4/css/main.css' type='text/css' media='all'>
<link rel='stylesheet' id='fancybox-css' href='../../../wp-content/themes/read-v4-2-4/css/jquery.fancybox-1.3.4.css' type='text/css' media='all'>
<link rel='stylesheet' id='wp-fix-css' href='../../../wp-content/themes/read-v4-2-4/css/wp-fix.css' type='text/css' media='all'>
<script type='text/javascript' src='../../../wp-includes/js/jquery/jquery.min.js?ver=3.6.0' id='jquery-core-js'></script>
<script type='text/javascript' src='../../../wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<link rel="https://api.w.org/" href="../../../wp-json/index.htm"><link rel="alternate" type="application/json" href="../../../wp-json/wp/v2/posts/27"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../../xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../../wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 5.8.6">
<link rel="canonical" href="index.htm">
<link rel='shortlink' href='index.htm?p=27'>
<link rel="alternate" type="application/json+oembed" href="../../../wp-json/oembed/1.0/embed-24?url=https%3A%2F%2Flooselycoupledlabs.com%2F2014%2F06%2Fmasstransit-publish-subscribe-example%2F">
<link rel="alternate" type="text/xml+oembed" href="../../../wp-json/oembed/1.0/embed-25?url=https%3A%2F%2Flooselycoupledlabs.com%2F2014%2F06%2Fmasstransit-publish-subscribe-example%2F&#038;format=xml">

<link rel="stylesheet" type="text/css" href="../../../wp-content/themes/read-v4-2-4/style.css">

		
<link rel="stylesheet" type="text/css" href="../../../css-1?family=Coustard&subset=latin">
<link rel="stylesheet" type="text/css" href="../../../css-1?family=Coustard&subset=latin">
<link rel="stylesheet" type="text/css" href="../../../css-1?family=Coustard&subset=latin">
<link rel="stylesheet" type="text/css" href="../../../css-3?family=Lora&subset=latin">
<style type="text/css">
a { color: #4488ff; }

a:hover { color: #3377ee; }

.main-navigation ul .current_page_item > a, .main-navigation ul .current-menu-item > a { color: #69be28; }

h1.site-title, h1.site-title a { font-family: "Coustard", Georgia, serif; }

h1, h2, h3, h4, h5, h6 { font-family: "Coustard", Georgia, serif; }

.main-navigation ul li { font-family: "Coustard", Georgia, serif; }

html { font-family: "Lora", Georgia, serif; }
</style>
		<style type="text/css">
.site-header hgroup {
  padding: 0;
}

h1.site-title {
  font-size: 2.20em;
}

.site-header {
  padding-bottom: 0;
}

table {
  border-collapse: collapse;     
}

table, th, td {
  border: 1px solid black;
}

th, td {
  padding: 8px;
}

code {
  box-shadow: none;
}
</style>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shCore.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushCSharp.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushPowerShell.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushXml.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushJScript.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushPlain.js"></script>
<link href="../../../syntaxhighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="../../../syntaxhighlighter/styles/shThemeDefault.css" rel="stylesheet" type="text/css">
</head>

<body class="post-template-default single single-post postid-27 single-format-standard">

    <div id="page" class="hfeed site"> 
        <header class="site-header wrapper" role="banner">
			<div class="row">
			    <hgroup>
					<h1 class="site-title">
															<a rel="home" href="../../../index.htm">
										<img alt="Loosely Coupled Labs" src="../../../wp-content/uploads/2014/06/loosely600-300x105.png">
									</a>
													</h1>
					<!-- end .site-title -->
					
					<h2 class="site-description">
						**ARCHIVED** A Blog Loosely Related to System Architecture by David Prothero **ARCHIVED**					</h2>
					<!-- end .site-description -->
			    </hgroup>
				
								
			    <nav id="site-navigation" class="main-navigation" role="navigation">
					<ul class="menu-default"><li class="page_item page-item-39"><a href="../../../about-me/index.htm">About Me</a></li><li class="page_item page-item-226"><a href="../../../subscribe/index.htm">Subscribe</a></li></ul>
			    </nav>
			    <!-- end #site-navigation -->
			</div>
			<!-- end .row -->
        </header>
        <!-- end .site-header -->
		
				
        <section id="main" class="middle wrapper">
			<div class="row row-fluid ">
<div id="primary" class="site-content">
	<div id="content" role="main">
		<div class="readable-content blog-single">
										<article id="post-27" class="clearfix post-27 post type-post status-publish format-standard has-post-thumbnail hentry category-tutorial tag-masstransit tag-rabbitmq tag-service-bus tag-soa">
								<header class="entry-header">
																		<h1 class="entry-title">A Simple MassTransit Publish/Subscribe Example</h1>
								</header>
								<!-- end .entry-header -->
								
								<div class="entry-meta">
									<span class="post-category">
										posted in <a href="../../../category/tutorial/index.htm" rel="category tag">Tutorial</a>									</span>
									<!-- end .post-category -->
									
									<span class="post-date">
										on <a rel="bookmark" title="12:23 am" href="index.htm"><time class="entry-date" datetime="2012-11-09T23:15:57+00:00">June 28, 2014</time></a>
									</span>
									<!-- end .post-date -->
									
									<span class="by-author"> by										<span class="author vcard">
											<a class="url fn n" rel="author" title="View all posts by david@prothero.com" href="../../../author/davidprothero-com/index.htm">david@prothero.com</a>
										</span>
										<!-- end .author -->
									</span>
									<!-- end .by-author -->
									
									<div class="share-links">
	<a>SHARE</a>
	
	<div class="share-wrap">
		<div class="facebook-wrap">
			<div id="fb-root"></div>
			
			<script>
				(function(d, s, id)
				{
					var js, fjs = d.getElementsByTagName(s)[0];
					if (d.getElementById(id)) return;
					js = d.createElement(s); js.id = id;
					js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
					fjs.parentNode.insertBefore(js, fjs);
				}(document, 'script', 'facebook-jssdk'));
			</script>
			
			<div class="fb-like" data-send="false" data-layout="button_count" data-width="400" data-show-faces="false" data-colorscheme="light" data-action="like"></div>
		</div>
		<!-- end .facebook-wrap -->
		
		<div class="twitter-wrap">
						<a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
			
			<script>
				!function(d, s, id)
				{
					var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}
				}(document, "script", "twitter-wjs");
			</script>
		</div>
		<!-- end .twitter-wrap -->
		
		<div class="google-wrap">
			<!-- Place this tag where you want the +1 button to render. -->
			<div class="g-plusone" data-size="medium"></div>
			
			<!-- Place this tag after the last +1 button tag. -->
			<script type="text/javascript">
			  (function()
			  {
				var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
				po.src = 'https://apis.google.com/js/plusone.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
			  })();
			</script>
		</div>
		<!-- end .google-wrap -->
		
		<div class="pinterest-wrap">
						
			<a href="http://pinterest.com/pin/create/button/?url=https://looselycoupledlabs.com/2014/06/masstransit-publish-subscribe-example/&media=https://looselycoupledlabs.com/wp-content/uploads/2014/06/mt-small.png&description=A Simple MassTransit Publish/Subscribe Example" class="pin-it-button" count-layout="horizontal"><img src="../../../images/PinExt.png" alt="Pin It" title="Pin It"></a>
			
			<script type="text/javascript" src="../../../js/pinit.js"></script>
		</div>
		<!-- end .pinterest-wrap -->
	</div>
	<!-- end .share-wrap -->
</div>	
<!-- end .share-links -->									
																	</div>
								<!-- end .entry-meta -->
								
																			<div class="featured-image">
												<img width="230" height="200" src="../../../wp-content/uploads/2014/06/mt-small.png" class="attachment-full size-full wp-post-image" alt="A Simple MassTransit Publish/Subscribe Example" loading="lazy" title="" srcset="../../../wp-content/uploads/2014/06/mt-small.png 230w, ../../../wp-content/uploads/2014/06/mt-small-150x130.png 150w, ../../../wp-content/uploads/2014/06/mt-small-200x173.png 200w" sizes="(max-width: 230px) 100vw, 230px">											</div>
											<!-- end .featured-image -->
																		
								<div class="entry-content clearfix">
									<p>When I first sat down to learn how to use <a title="MassTransit Project Site" href="http://masstransit-project.com/" target="_blank">MassTransit</a>, I found it difficult to just get a simple example that published a message onto the bus with another process that subscribed to messages of the same type working. Hopefully, this primer will get you on the bus quicker.</p>
<div class="alert info">NOTE: There is a <a href="../../../2015/07/masstransit-3-update-a-simple-publishsubscribe-example/index.htm">newer version of this post</a> for those using MassTransit 3. The post below is for MassTransit 2.x.</div>
<h1>Setting Up Your Environment</h1>
<p>The first thing you need is a message queuing framework. MassTransit supports MSMQ, RabbitMQ, and others, but I find that RabbitMQ is really the way to go. That’s especially true when using the publish/subscribe pattern. The reason for this is that RabbitMQ has a complete routing framework built-in and MassTransit will leverage this when persisting your subscriptions. When creating a cluster of RabbitMQ servers for availability, this routing information is replicated to all the nodes.</p>
<p>In this article, you’re going to run RabbitMQ on your local Windows development box. Both our publisher and subscriber will connect to the same RabbitMQ instance. In a future post, I’ll detail how to set up multiple RabbitMQ instances in a cluster.</p>
<h2>Installing RabbitMQ</h2>
<p>RabbitMQ requires the Erlang runtime, so that’s the first thing you need to download and install. Head over to <a href="http://www.erlang.org/download.html" target="_blank">Erlang.org’s download page</a> and get the latest binary release for Windows (it’s likely you’ll want the 64-bit version). It’s a simple setup wizard, so you’ll have Erlang installed on your machine in short order.</p>
<p>Next, <a href="http://www.rabbitmq.com/download.html" target="_blank">download the latest version of RabbitMQ</a> for Windows. Again, it’s an easy setup wizard that you can quickly fly through. Just accept the defaults.</p>
<h2>Enabling the RabbitMQ Web Management Interface</h2>
<p>One RabbitMQ feature that I found extremely useful (but which isn’t enabled by default) is the web-based management interface. With this, you can see the exchanges and queues that are set up by MassTransit in RabbitMQ. To enable this, find the “RabbitMQ Command Prompt (sbin dir)” item that the RabbitMQ installer added to your Start menu and launch it. From the command line, run the following command:</p>
<pre class="brush: ps; toolbar: false;">&gt; rabbitmq-plugins enable rabbitmq_management</pre>
<p>It will confirm that the plugin and its dependencies have been enabled and instruct you to restart RabbitMQ. When installed on Windows, RabbitMQ runs as a Windows service. You can use the Services MMC snap-in to restart it or just run the following command:</p>
<pre class="brush: ps; toolbar: false;">&gt; net service stop RabbitMQ
...
&gt; net service start RabbitMQ</pre>
<p>Now go to <a href="http://localhost:15672/">http://localhost:15672/</a> to open the management console. Default credentials to login are guest/guest (you can change the credentials from the Admin tab).</p>
<p>There’s not much to see yet, but we’ll set the stage. Go to the Exchanges tab. You’ll see the following default RabbitMQ exchanges:</p>
<p><a href="../../../wp-content/uploads/2014/06/image.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb.png" alt="image" width="325" height="213" border="0"></a></p>
<p>An exchange is something you can send messages to. It cannot hold messages. It’s merely a set of routing instructions that tell RabbitMQ where to deliver the message. We’ll come back here in a little while.</p>
<p>Now click on the Queues tab. Nothing here yet. Queues can actually hold messages and are where applications can actually pick up messages.</p>
<p>So, to use a real world analogy, an Exchange is like the local Post Office, and a Queue is like your mailbox. The only thing that an Exchange can do that most traditional Post Offices don’t do is actually make multiple copies of a message to be delivered to multiple mailboxes.</p>
<h1>Creating the Sample Applications</h1>
<p>I used Visual Studio 2013 to create this sample, but it should work in 2012 as well. You can get the entire source from: <a href="https://github.com/dprothero/MtPubSubExample">https://github.com/dprothero/MtPubSubExample</a></p>
<h2>Creating a Contract</h2>
<p>I like to use the concept of a “contract” for my messages I want to put onto the service bus. This is an interface definition that both the publisher and subscriber have to agree upon. They don’t need to know anything about the implementation of this interface on either side. To keep the publisher and subscriber as loosely coupled as possible, I like to put my contracts in their own assembly so that this is the only shared dependency.</p>
<p>So, the first step is to create a new solution called MtPubSubExample and a new class library called “Contracts”. To the class library, add a single interface called “SomethingHappened.”</p>
<pre class="brush: csharp; toolbar: false;">using System;

namespace Contracts
{
  public interface SomethingHappened
  {
    string What { get; }
    DateTime When { get; }
  }
}</pre>
<p>SomethingHappened will be the message interface we use for our sample message. Our publisher will create an instance of a class implementing SomethingHappened, set What and When properties, and publish it onto the service bus.</p>
<p>Our subscriber will then set up a subscription (aka Consumer) to listen for all messages of type SomethingHappened. MassTransit will call our Consumer class whenever a SomethingHappened message is received, and we can handle it as we wish, presumably inspecting the What and the When properties.</p>
<h2>Shared Configuration Setup Code</h2>
<p>When you’re writing a new project from scratch, you go through many permutations and refactor as you go. Initially, this example had the service bus setup code duplicated in both the publisher and subscriber projects. This is fine, particularly if you really aren’t in a position to share much code between the two sides (except the contracts of course). However, in my case, I preferred to use a common class which I’ll call “BusInitializer” to set up my instance to MassTransit and get it configured.</p>
<p>So, add another class library to the MtPubSubExample solution and name it “Configuration”. Before creating our class, it’s time to head to NuGet and pull in MassTransit. The quickest way to get everything you need is to find the MassTransit.RabbitMq package and install that. Doing so will install all of MassTransit and its dependencies.</p>
<p>You still need one more package. I found that MassTransit doesn’t work unless you install one of the logging integration packages that are designed for it. For me, I selected the Log4Net integration package (MassTransit.Log4Net).</p>
<p>Now, create a new class called “BusInitializer.”</p>
<pre class="brush: csharp; toolbar: false;">using MassTransit;
using MassTransit.BusConfigurators;
using MassTransit.Log4NetIntegration.Logging;
using System;

namespace Configuration
{
  public class BusInitializer
  {
    public static IServiceBus CreateBus(string queueName, Action&lt;ServiceBusConfigurator&gt; moreInitialization)
    {
      Log4NetLogger.Use();
      var bus = ServiceBusFactory.New(x =&gt;
      {
        x.UseRabbitMq();
        x.ReceiveFrom("rabbitmq://localhost/MtPubSubExample_" + queueName);
        moreInitialization(x);
      });

      return bus;
    }
  }
}</pre>
<p>We’re creating a static method called “CreateBus,” which both our publisher and subscriber can use to set up an instance of a bus, using the Log4NetLogger, and connect to a local RabbitMQ instance. Because there may be additional custom setup that the publisher or subscriber may want to do, we allow passing in a lambda expression to perform the additional setup.</p>
<h2>Creating the Publisher</h2>
<p>We’ll make the publisher a very simple console application that just prompts the user for some text and then publishes that text as part of a SomethingHappened message. Add a new Console Application project called “TestPublisher” to the solution and add a new class called “SomethingHappenedMessage.” This will be our concrete implementation of the SomethingHappened interface. You’ll need to add a project reference to the Contracts (and add one to Configuration too, while you’re at it).</p>
<pre class="brush: csharp; toolbar: false;">using Contracts;
using System;

namespace TestPublisher
{
  class SomethingHappenedMessage : SomethingHappened
  {
    public string What { get; set; }
    public DateTime When { get; set; }
  }
}</pre>
<p>Now, in the Main method of the Program.cs file in your Console Application, you can put in the code to set up the bus, prompt the user for text, and publish that text onto the bus. Real quick first, however, add a NuGet reference to the MassTransit package.</p>
<pre class="brush: csharp; toolbar: false;">using Configuration;
using Contracts;
using System;

namespace TestPublisher
{
  class Program
  {
    static void Main(string[] args)
    {
      var bus = BusInitializer.CreateBus("TestPublisher", x =&gt; { });
      string text = "";

      while (text != "quit")
      {
        Console.Write("Enter a message: ");
        text = Console.ReadLine();

        var message = new SomethingHappenedMessage() { What = text, When = DateTime.Now };
        bus.Publish&lt;SomethingHappened&gt;(message, x =&gt; { x.SetDeliveryMode(MassTransit.DeliveryMode.Persistent); });
      }

      bus.Dispose();
    }
  }
}</pre>
<p>Pretty simple, huh? We put the input capture and message publishing in a loop to make it easy to send multiple messages. Just put a catch for the string “quit” so we can exit the publisher when we’d like.</p>
<p>If you make TestPublisher the startup project of the solution and run it, right now you can publish messages all you like…. However, nobody is listening yet!</p>
<h2>What’s Going on in RabbitMQ So Far?</h2>
<p>If you go back into the RabbitMQ web interface and jump over to the Exchanges tab, you’ll see we have a couple new arrivals.</p>
<p><a href="../../../wp-content/uploads/2014/06/image4.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image4_thumb.png" alt="image" width="340" height="214" border="0"></a></p>
<p>Contracts:SomethingHappened is a new exchange created for the SomethingHappened message type. When we published this message, MassTransit automatically created this exchange. Click on it and scroll down to the Bindings section, and you’ll see there are no bindings yet:</p>
<p><a href="../../../wp-content/uploads/2014/06/image1.png"><img loading="lazy" style="border-width: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb1.png" alt="image" width="152" height="143" border="0"></a></p>
<p>That’s because nobody has subscribed to SomethingHappened messages yet. They go to the exchange and then die because there’s no queue to route them to.</p>
<p>The MtPubSubExample_TestPublisher exchange (and corresponding queue on the Queues tab) were setup in our BusInitializer code. Our publisher isn’t listening for messages sent to it, so this isn’t really being used.</p>
<h2>Creating the Subscriber</h2>
<p>The final piece of the puzzle! Add another Console Application project to your solution and call it TestSubscriber. Again, add project references to Contracts and Configuration and then add the MassTransit NuGet package.</p>
<p>The first thing we need is a Consumer class to consume the SomethingHappened messages. Add a new class to the console app and call it “SomethingHappenedConsumer.”</p>
<pre class="brush: csharp; toolbar: false;">using Contracts;
using MassTransit;
using System;

namespace TestSubscriber
{
  class SomethingHappenedConsumer : Consumes&lt;SomethingHappened&gt;.Context
  {
    public void Consume(IConsumeContext&lt;SomethingHappened&gt; message)
    {
      Console.Write("TXT: " + message.Message.What);
      Console.Write("  SENT: " + message.Message.When.ToString());
      Console.Write("  PROCESSED: " + DateTime.Now.ToString());
      Console.WriteLine(" (" + System.Threading.Thread.CurrentThread.ManagedThreadId.ToString() + ")");
    }
  }
}</pre>
<p>This consumer class implements a specific MassTransit interface whose Consume method will be called with the message context and SomethingHappened message each time a message is received. Here we are simply writing the message out to the console.</p>
<p>Finally, in the Main method of Program.cs, we can initialize the bus and, as part of the initialization, instruct MassTransit that we wish to subscribe to messages of type SomethingHappened.</p>
<pre class="brush: csharp; toolbar: false;">using Configuration;
using MassTransit;
using System;

namespace TestSubscriber
{
  class Program
  {
    static void Main(string[] args)
    {
      var bus = BusInitializer.CreateBus("TestSubscriber", x =&gt;
      {
        x.Subscribe(subs =&gt;
        {
          subs.Consumer&lt;SomethingHappenedConsumer&gt;().Permanent();
        });
      });

      Console.ReadKey();

      bus.Dispose();
    }
  }
}</pre>
<p>Now right-click on the MtPubSubExample solution in the solution explorer and choose “Set Startup Projects….” From here, choose the Multiple startup projects option and set the Action for both TestPublisher and TestSubscriber to Start. Now when you run your solution, both the publisher and subscriber will run.</p>
<p>Type some messages into the publisher. You should see them show up immediately in the subscriber window!</p>
<p><a href="../../../wp-content/uploads/2014/06/image10.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image10_thumb.png" alt="image" width="570" height="212" border="0"></a></p>
<p>Now close <em>just</em> the Subscriber sample window and publish a few more messages in the Publisher window.</p>
<p><a href="../../../wp-content/uploads/2014/06/image2.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb2.png" alt="image" width="432" height="213" border="0"></a></p>
<p>Go ahead and close the Publisher window for now. Let’s take a deeper look at where those three messages went.</p>
<h2></h2>
<h2>What’s Going on in RabbitMQ Now?</h2>
<p>Go back into the RabbitMQ web interface and go back to the Exchanges tab. You’ll see a new exchange called MtPubSubExample_TestSubscriber, but first click on the Contracts:SomethingHappened exchange and scroll down to the Bindings section. You’ll see we now have a binding.</p>
<p><a href="../../../wp-content/uploads/2014/06/image3.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb3.png" alt="image" width="534" height="207" border="0"></a></p>
<p>So, by creating a subscription from our TestSubscriber, MassTransit automatically set up this binding for us. Click on the MtPubSubExample_TestSubscriber here, and you’ll see you’re taken to the setup page for an exchange called MtPubSubExample_TestSubscriber. Scroll down to Bindings, and you’ll see we’re bound to a queue named the same as the exchange (in the binding diagrams, exchanges show up as rectangles with rounded corners, whereas queues have straight corners).</p>
<p><a href="../../../wp-content/uploads/2014/06/image5.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb4.png" alt="image" width="531" height="331" border="0"></a></p>
<p>The web interface is great in how it shows the predecessor in addition to the successor in the path. Click the MtPubSubExample_TestSubscriber queue here, and you’ll be taken to the queue setup page for that queue. If you haven’t fired up the TestSubscriber app since we published those last three messages, you should see that there are three messages in the queue:</p>
<p><a href="../../../wp-content/uploads/2014/06/image6.png"><img loading="lazy" style="border-width: 0px; margin: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb5.png" alt="image" width="219" height="103" border="0"></a></p>
<p>Fire up the TestSubscriber app, and you should see it process the three messages left in the queue.</p>
<p><a href="../../../wp-content/uploads/2014/06/image7.png"><img loading="lazy" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/06/image_thumb6.png" alt="image" width="563" height="123" border="0"></a></p>
<h1></h1>
<p>Notice the timestamp from the message versus the timestamp of when the subscriber actually published the message. In this case, there was a 6-minute lag (the 6 minutes we were poking around in RabbitMQ before starting up the subscriber again).</p>
<h1>Wrap Up</h1>
<p>Hopefully, this post was helpful in getting you off the ground with MassTransit. There’s more to come. In upcoming posts, I’ll dig into how to put this together in the real world. First, your publisher and subscriber are likely to live on separate machines, so we’ll look at how to set up a RabbitMQ cluster to make that work. We’ll set up an ASP.NET application that publishes event messages and then a Windows Service that will subscribe to the messages and log them to a data store. Let me know if you have other examples you would like to see.</p>
<p>Until then…</p>
									
																	</div>
								<!-- end .entry-content -->
								
																			<footer class="entry-meta post-tags">
												<a href="../../../tag/masstransit/index.htm" rel="tag">MassTransit</a>, <a href="../../../tag/rabbitmq/index.htm" rel="tag">RabbitMQ</a>, <a href="../../../tag/service-bus/index.htm" rel="tag">Service Bus</a>, <a href="../../../tag/soa/index.htm" rel="tag">SOA</a>											</footer>
											<!-- end .entry-meta -->
																	</article>
							<!-- end .hentry -->
							
							<aside class="about-author">
	<h3>ABOUT THE AUTHOR</h3>
	
	<div class="row-fluid author-bio">
		<div class="span2 author-img">
			<a href="../../../author/davidprothero-com/index.htm">
				<img alt='david@prothero.com' src='../../../avatar/a0c880ad31c66856b29f53e6c32d688b.jpeg?s=226&#038;d=mm&#038;r=g' srcset='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-1.jpeg 2x?s=452&#038;d=mm&#038;r=g 2x' class='avatar avatar-226 photo' height='226' width='226' loading='lazy'>			</a>
		</div>
		<!-- end .author-img -->
		
		<div class="span10 author-info">
			<h4 class="author-name">david@prothero.com</h4>
			
			<p>
				I have been providing technical leadership for companies for over 15 years. However, my software engineering experience extends back over 25 years. Currently, I am a Developer Educator for Twilio. Prior to that, I served as both IT Director and Software Engineering Director for Therapeutic Research Center (TRC). I guided the company from a print-based newsletter company to an online information services company.			</p>
		</div>
		<!-- end .author-info -->
	</div>
	<!-- end .author-bio -->
</aside>
<!-- end .about-author -->							
							<nav class="row-fluid nav-single">
								<div class="span6 nav-previous">
																	</div>
								<!-- end .nav-previous -->
								
								<div class="span6 nav-next">
									<h4>NEXT POST</h4><a href="../../07/creating-a-rabbitmq-cluster-for-use-with-masstransit/index.htm" rel="next">Creating a RabbitMQ Cluster for Use with MassTransit <span class="meta-nav">&#8594;</span></a>								</div>
								<!-- end .nav-next -->
							</nav>
							<!-- end .nav-single -->
							
							
<div id="comments" class="comments-area">
					<h2 class="comments-title">
					5 Comments <span class="on">&#8594;</span> <span>A Simple MassTransit Publish/Subscribe Example</span>				</h2>
				<!-- end .comments-title -->
				
				<ol class="commentlist">
										
					<li class="comment even thread-even depth-1" id="li-comment-45">
						<article id="comment-45" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/196da402f9a772e7256d0dffc7a89283.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/196da402f9a772e7256d0dffc7a89283-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">nevin </cite><a href="index.htm#comment-45"><time datetime="2015-01-13T17:16:00+00:00">January 13, 2015 at 5:16 pm</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Thanks, that was helpful in getting started.</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
					
					<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-51">
						<article id="comment-51" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/35e100c20023a154068784184d9b68bf.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/35e100c20023a154068784184d9b68bf-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn"><a href='http://SeanKilleen.com/' rel='external nofollow ugc' class='url'>Sean Killeen</a> </cite><a href="index.htm#comment-51"><time datetime="2015-03-20T13:48:00+00:00">March 20, 2015 at 1:48 pm</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>This was really helpful when I was getting started with MT. Yours was the first article that really helped me fit it all together and make sense of it. Thank you!</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					<ol class="children">
					
					<li class="comment even depth-2" id="li-comment-52">
						<article id="comment-52" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-2.jpeg?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-3.jpeg 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">dprothero </cite><a href="index.htm#comment-52"><time datetime="2015-03-20T14:18:00+00:00">March 20, 2015 at 2:18 pm</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Thanks so much for the comment, Sean. That&#8217;s what I was going for. Glad it was helpful.</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
					
					<li class="comment odd alt thread-even depth-1" id="li-comment-54">
						<article id="comment-54" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/56cfc59e8c5501b9ad47d98a6957b4ca.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/56cfc59e8c5501b9ad47d98a6957b4ca-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Marcin Kurtz </cite><a href="index.htm#comment-54"><time datetime="2015-04-28T17:31:00+00:00">April 28, 2015 at 5:31 pm</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Hi, thanks for great introduction to MT!</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
					
					<li class="comment even thread-odd thread-alt depth-1" id="li-comment-55">
						<article id="comment-55" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/9411e17512ec3bc9d65bf4798ca826a5.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/9411e17512ec3bc9d65bf4798ca826a5-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Ozcan Bircan </cite><a href="index.htm#comment-55"><time datetime="2015-05-28T04:53:00+00:00">May 28, 2015 at 4:53 am</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>This is a great post to start using MassTransit with RabbitMQ, thanks for the detailed explanations and I hope we will see more posts about MassTransit in your blog (cause their documentation is not sufficient :))</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
				</ol>
				<!-- end .commentlist -->
				
								
											<p class="nocomments">Comments are closed.</p>
										
	</div>
<!-- end #comments -->								</div>
		<!-- end .blog-single -->
	</div>
	<!-- end #content -->
</div>
<!-- end #primary -->

			</div>
			<!-- end .row .row-fluid -->
        </section>
        <!-- end #main -->
		
        <footer class="site-footer wrapper" role="contentinfo">
			<div class="row">
				<div id="supplementary" class="row-fluid">
									</div>
				<!-- end #supplementary -->
				
				<div class="site-info">
					Copyright © 2014 by David Prothero
All rights reserved.				</div>
				<!-- end .site-info -->
			</div>
			<!-- end .row -->
        </footer>
        <!-- end .site-footer -->
    </div>
    <!-- end #PAGE -->
	
	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-1922425-8', 'auto');
  ga('send', 'pageview');

</script>
<script type="text/javascript">
  SyntaxHighlighter.all();
</script><script type='text/javascript' src='../../../wp-includes/js/comment-reply.min.js?ver=5.8.6' id='comment-reply-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/detectmobilebrowser.js' id='detectmobilebrowser-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/modernizr.js' id='modernizr-js'></script>
<script type='text/javascript' src='../../../wp-includes/js/imagesloaded.min.js?ver=4.1.4' id='imagesloaded-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.fitvids.js' id='fitvids-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/google-code-prettify/prettify.js' id='google-code-prettify-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.uniform.min.js' id='uniform-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.flexslider-min.js' id='flexslider-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/mediaelement/mediaelement-and-player.min.js' id='mediaelement-and-player-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.isotope.min.js' id='isotope-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.fancybox-1.3.4.pack.js' id='fancybox-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.masonry.min.js' id='masonry-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.history.js' id='history-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/js-url.min.js' id='js-url-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquerypp.custom.js' id='jquerypp-custom-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/gamma.js' id='gamma-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/main.js' id='main-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.validate.min.js' id='validate-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/send-mail.js' id='send-mail-js'></script>
<script type='text/javascript' src='../../../wp-includes/js/wp-embed.min.js?ver=5.8.6' id='wp-embed-js'></script>
</body>
</html>