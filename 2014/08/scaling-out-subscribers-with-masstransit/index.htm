<!doctype html>

<html lang="en-US">
<head>
	<meta charset="UTF-8">
	
	
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

			    
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    
	<title>Scaling Out Subscribers With MassTransit | Loosely Coupled Labs</title>
    
    <!--[if lte IE 9]>
        <script src="https://looselycoupledlabs.com/wp-content/themes/read-v4-2-4/js/html5shiv.js"></script>
        <script src="https://looselycoupledlabs.com/wp-content/themes/read-v4-2-4/js/selectivizr-min.js"></script>
    <![endif]-->
	
		
	<meta name='robots' content='max-image-preview:large'>
<link rel='dns-prefetch' href='//fonts.googleapis.com'>
<link rel='dns-prefetch' href='//s.w.org'>
<link rel="alternate" type="application/rss+xml" title="Loosely Coupled Labs &raquo; Feed" href="../../../feed/index.htm">
<link rel="alternate" type="application/rss+xml" title="Loosely Coupled Labs &raquo; Comments Feed" href="../../../comments/feed/index.htm">
<link rel="alternate" type="application/rss+xml" title="Loosely Coupled Labs &raquo; Scaling Out Subscribers With MassTransit Comments Feed" href="feed/index.htm">
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/looselycoupledlabs.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.8.6"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([10084,65039,8205,55357,56613],[10084,65039,8203,55357,56613])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css' href='../../../wp-includes/css/dist/block-library/style.min.css?ver=5.8.6' type='text/css' media='all'>
<link rel='stylesheet' id='unifrakturmaguntia-css' href='../../../css?family=UnifrakturMaguntia&#038;subset=latin' type='text/css' media='all'>
<link rel='stylesheet' id='coustard-css' href='../../../css-1?family=Coustard&#038;subset=latin' type='text/css' media='all'>
<link rel='stylesheet' id='lora-css' href='../../../css-2?family=Lora:400,700,400italic,700italic&#038;subset=latin' type='text/css' media='all'>
<link rel='stylesheet' id='print-css' href='../../../wp-content/themes/read-v4-2-4/css/print.css' type='text/css' media='print'>
<link rel='stylesheet' id='grid-css' href='../../../wp-content/themes/read-v4-2-4/css/grid.css' type='text/css' media='all'>
<link rel='stylesheet' id='normalize-css' href='../../../wp-content/themes/read-v4-2-4/css/normalize.css' type='text/css' media='all'>
<link rel='stylesheet' id='font-awesome-css' href='../../../wp-content/themes/read-v4-2-4/css/font-awesome.css' type='text/css' media='all'>
<link rel='stylesheet' id='google-code-prettify-css' href='../../../wp-content/themes/read-v4-2-4/js/google-code-prettify/prettify.css' type='text/css' media='all'>
<link rel='stylesheet' id='uniform-css' href='../../../wp-content/themes/read-v4-2-4/css/uniform.default.css' type='text/css' media='all'>
<link rel='stylesheet' id='flexslider-css' href='../../../wp-content/themes/read-v4-2-4/css/flexslider.css' type='text/css' media='all'>
<link rel='stylesheet' id='mediaelementplayer-css' href='../../../wp-content/themes/read-v4-2-4/js/mediaelement/mediaelementplayer.css' type='text/css' media='all'>
<link rel='stylesheet' id='gamma-gallery-css' href='../../../wp-content/themes/read-v4-2-4/css/gamma-gallery.css' type='text/css' media='all'>
<link rel='stylesheet' id='main-css' href='../../../wp-content/themes/read-v4-2-4/css/main.css' type='text/css' media='all'>
<link rel='stylesheet' id='fancybox-css' href='../../../wp-content/themes/read-v4-2-4/css/jquery.fancybox-1.3.4.css' type='text/css' media='all'>
<link rel='stylesheet' id='wp-fix-css' href='../../../wp-content/themes/read-v4-2-4/css/wp-fix.css' type='text/css' media='all'>
<script type='text/javascript' src='../../../wp-includes/js/jquery/jquery.min.js?ver=3.6.0' id='jquery-core-js'></script>
<script type='text/javascript' src='../../../wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<link rel="https://api.w.org/" href="../../../wp-json/index.htm"><link rel="alternate" type="application/json" href="../../../wp-json/wp/v2/posts/150"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../../xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="../../../wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 5.8.6">
<link rel="canonical" href="index.htm">
<link rel='shortlink' href='index.htm?p=150'>
<link rel="alternate" type="application/json+oembed" href="../../../wp-json/oembed/1.0/embed-16?url=https%3A%2F%2Flooselycoupledlabs.com%2F2014%2F08%2Fscaling-out-subscribers-with-masstransit%2F">
<link rel="alternate" type="text/xml+oembed" href="../../../wp-json/oembed/1.0/embed-17?url=https%3A%2F%2Flooselycoupledlabs.com%2F2014%2F08%2Fscaling-out-subscribers-with-masstransit%2F&#038;format=xml">

<link rel="stylesheet" type="text/css" href="../../../wp-content/themes/read-v4-2-4/style.css">

		
<link rel="stylesheet" type="text/css" href="../../../css-1?family=Coustard&subset=latin">
<link rel="stylesheet" type="text/css" href="../../../css-1?family=Coustard&subset=latin">
<link rel="stylesheet" type="text/css" href="../../../css-1?family=Coustard&subset=latin">
<link rel="stylesheet" type="text/css" href="../../../css-3?family=Lora&subset=latin">
<style type="text/css">
a { color: #4488ff; }

a:hover { color: #3377ee; }

.main-navigation ul .current_page_item > a, .main-navigation ul .current-menu-item > a { color: #69be28; }

h1.site-title, h1.site-title a { font-family: "Coustard", Georgia, serif; }

h1, h2, h3, h4, h5, h6 { font-family: "Coustard", Georgia, serif; }

.main-navigation ul li { font-family: "Coustard", Georgia, serif; }

html { font-family: "Lora", Georgia, serif; }
</style>
		<style type="text/css">
.site-header hgroup {
  padding: 0;
}

h1.site-title {
  font-size: 2.20em;
}

.site-header {
  padding-bottom: 0;
}

table {
  border-collapse: collapse;     
}

table, th, td {
  border: 1px solid black;
}

th, td {
  padding: 8px;
}

code {
  box-shadow: none;
}
</style>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shCore.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushCSharp.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushPowerShell.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushXml.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushJScript.js"></script>
<script type="text/javascript" src="../../../syntaxhighlighter/scripts/shBrushPlain.js"></script>
<link href="../../../syntaxhighlighter/styles/shCore.css" rel="stylesheet" type="text/css">
<link href="../../../syntaxhighlighter/styles/shThemeDefault.css" rel="stylesheet" type="text/css">
</head>

<body class="post-template-default single single-post postid-150 single-format-standard">

    <div id="page" class="hfeed site"> 
        <header class="site-header wrapper" role="banner">
			<div class="row">
			    <hgroup>
					<h1 class="site-title">
															<a rel="home" href="../../../index.htm">
										<img alt="Loosely Coupled Labs" src="../../../wp-content/uploads/2014/06/loosely600-300x105.png">
									</a>
													</h1>
					<!-- end .site-title -->
					
					<h2 class="site-description">
						**ARCHIVED** A Blog Loosely Related to System Architecture by David Prothero **ARCHIVED**					</h2>
					<!-- end .site-description -->
			    </hgroup>
				
								
			    <nav id="site-navigation" class="main-navigation" role="navigation">
					<ul class="menu-default"><li class="page_item page-item-39"><a href="../../../about-me/index.htm">About Me</a></li><li class="page_item page-item-226"><a href="../../../subscribe/index.htm">Subscribe</a></li></ul>
			    </nav>
			    <!-- end #site-navigation -->
			</div>
			<!-- end .row -->
        </header>
        <!-- end .site-header -->
		
				
        <section id="main" class="middle wrapper">
			<div class="row row-fluid ">
<div id="primary" class="site-content">
	<div id="content" role="main">
		<div class="readable-content blog-single">
										<article id="post-150" class="clearfix post-150 post type-post status-publish format-standard has-post-thumbnail hentry category-tutorial tag-masstransit tag-rabbitmq tag-service-bus tag-soa">
								<header class="entry-header">
																		<h1 class="entry-title">Scaling Out Subscribers With MassTransit</h1>
								</header>
								<!-- end .entry-header -->
								
								<div class="entry-meta">
									<span class="post-category">
										posted in <a href="../../../category/tutorial/index.htm" rel="category tag">Tutorial</a>									</span>
									<!-- end .post-category -->
									
									<span class="post-date">
										on <a rel="bookmark" title="12:41 am" href="index.htm"><time class="entry-date" datetime="2012-11-09T23:15:57+00:00">August 4, 2014</time></a>
									</span>
									<!-- end .post-date -->
									
									<span class="by-author"> by										<span class="author vcard">
											<a class="url fn n" rel="author" title="View all posts by david@prothero.com" href="../../../author/davidprothero-com/index.htm">david@prothero.com</a>
										</span>
										<!-- end .author -->
									</span>
									<!-- end .by-author -->
									
									<div class="share-links">
	<a>SHARE</a>
	
	<div class="share-wrap">
		<div class="facebook-wrap">
			<div id="fb-root"></div>
			
			<script>
				(function(d, s, id)
				{
					var js, fjs = d.getElementsByTagName(s)[0];
					if (d.getElementById(id)) return;
					js = d.createElement(s); js.id = id;
					js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
					fjs.parentNode.insertBefore(js, fjs);
				}(document, 'script', 'facebook-jssdk'));
			</script>
			
			<div class="fb-like" data-send="false" data-layout="button_count" data-width="400" data-show-faces="false" data-colorscheme="light" data-action="like"></div>
		</div>
		<!-- end .facebook-wrap -->
		
		<div class="twitter-wrap">
						<a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
			
			<script>
				!function(d, s, id)
				{
					var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}
				}(document, "script", "twitter-wjs");
			</script>
		</div>
		<!-- end .twitter-wrap -->
		
		<div class="google-wrap">
			<!-- Place this tag where you want the +1 button to render. -->
			<div class="g-plusone" data-size="medium"></div>
			
			<!-- Place this tag after the last +1 button tag. -->
			<script type="text/javascript">
			  (function()
			  {
				var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
				po.src = 'https://apis.google.com/js/plusone.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
			  })();
			</script>
		</div>
		<!-- end .google-wrap -->
		
		<div class="pinterest-wrap">
						
			<a href="http://pinterest.com/pin/create/button/?url=https://looselycoupledlabs.com/2014/08/scaling-out-subscribers-with-masstransit/&media=https://looselycoupledlabs.com/wp-content/uploads/2014/08/lots-of-messages1.jpg&description=Scaling Out Subscribers With MassTransit" class="pin-it-button" count-layout="horizontal"><img src="../../../images/PinExt.png" alt="Pin It" title="Pin It"></a>
			
			<script type="text/javascript" src="../../../js/pinit.js"></script>
		</div>
		<!-- end .pinterest-wrap -->
	</div>
	<!-- end .share-wrap -->
</div>	
<!-- end .share-links -->									
																	</div>
								<!-- end .entry-meta -->
								
																			<div class="featured-image">
												<img width="237" height="215" src="../../../wp-content/uploads/2014/08/lots-of-messages1.jpg" class="attachment-full size-full wp-post-image" alt="Scaling Out Subscribers With MassTransit" loading="lazy" title="" srcset="../../../wp-content/uploads/2014/08/lots-of-messages1.jpg 237w, ../../../wp-content/uploads/2014/08/lots-of-messages1-150x136.jpg 150w, ../../../wp-content/uploads/2014/08/lots-of-messages1-200x181.jpg 200w" sizes="(max-width: 237px) 100vw, 237px">											</div>
											<!-- end .featured-image -->
																		
								<div class="entry-content clearfix">
									<p>So far on this blog, we’ve been looking at the <a href="../../06/masstransit-publish-subscribe-example/index.htm">publish/subscribe</a> messaging pattern using <a href="http://masstransit-project.com/" target="_blank">MassTransit</a> and <a href="http://www.rabbitmq.com/" target="_blank">RabbitMQ</a>. So far, we’ve dealt with a single publisher and a single subscriber. We looked at how we can have those two roles <a href="../../07/creating-a-rabbitmq-cluster-for-use-with-masstransit/index.htm">live on separate servers</a>. Finally, we looked at <a href="../../07/error-handling-in-masstransit-consumers/index.htm">how to handle errors</a> in the subscriber.</p>
<p>What happens, now, when your subscriber can’t process messages as fast as the messages are being published on the bus? This is a special situation, to be sure, but it certainly is possible in high message volume environments. It can be compounded if the messages themselves are fairly expensive to process.</p>
<h1>Open the Flood Gates</h1>
<p>Let’s take our simple <a href="../../06/masstransit-publish-subscribe-example/index.htm">publish/subscribe example</a> and tweak it so we can have it dump a large number of messages onto the bus extremely quickly. Originally, the example prompted for a string and published that string as a single SomethingHappened message. Instead, let’s prompt for a number of messages that should be put onto the bus.</p>
<pre class="brush: csharp; toolbar: false; highlight: [4,17,20, 21,22,23,24,25,26,27,28,29,30,31,32];">using Configuration;
using Contracts;
using System;
using System.Threading.Tasks;

namespace TestPublisher
{
  class Program
  {
    static void Main(string[] args)
    {
      var bus = BusInitializer.CreateBus("TestPublisher", x =&gt; { });
      string text = "";

      while (text != "quit")
      {
        Console.Write("Enter number of messages to generate (quit to exit): ");
        text = Console.ReadLine();

        int numMessages = 0;
        if (int.TryParse(text, out numMessages) &amp;&amp; numMessages &gt; 0)
        {
          Parallel.For(0, numMessages, i =&gt;
          {
            var message = new SomethingHappenedMessage() { What = "message " + i.ToString(), When = DateTime.Now };
            bus.Publish&lt;SomethingHappened&gt;(message, x =&gt; { x.SetDeliveryMode(MassTransit.DeliveryMode.Persistent); });
          });
        }
        else if(text != "quit")
        {
          Console.WriteLine("\"" + text + "\" is not a number.");
        }
      }

      bus.Dispose();
    }
  }
}
</pre>
<p>We’re using the System.Threading.Tasks.Parallel.For method to be able to simultaneously publish multiple messages onto the bus.</p>
<p>Now in our subscriber, let’s have it simulate 250 milliseconds of processing time with a call to System.Threading.Thread.Sleep. Also, because MassTransit will run 4 threads per CPU for our consumer and the messages will be flying in, we’ll condense our Console output to a single WriteLine call instead of multiple calls to Write so as to avoid the output from multiple messages getting jumbled together.</p>
<pre class="brush: csharp; toolbar: false; highlight: [4,12,13,14,15,17,18];">using Contracts;
using MassTransit;
using System;
using System.Threading;

namespace TestSubscriber
{
  class SomethingHappenedConsumer : Consumes&lt;SomethingHappened&gt;.Context
  {
    public void Consume(IConsumeContext&lt;SomethingHappened&gt; message)
    {
      Console.WriteLine("TXT: " + message.Message.What +
                        "  SENT: " + message.Message.When.ToString() +
                        "  PROCESSED: " + DateTime.Now.ToString() + 
                        " (" + System.Threading.Thread.CurrentThread.ManagedThreadId.ToString() + ")");

      // Simulate processing time
      Thread.Sleep(250);
    }
  }
}
</pre>
<h2>Running the Test</h2>
<p>The test code for this example can be <a href="https://github.com/dprothero/MtPubSubExample/tree/scaling-out" target="_blank">found on github</a>.</p>
<p>Make sure both TestPublisher and TestSubscriber are set up as startup projects and run the project in Visual Studio. Try publishing 1,000 messages:</p>
<p><a href="../../../wp-content/uploads/2014/08/image.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb.png" alt="image" width="596" height="394" border="0"></a></p>
<p>As you could probably see, the prompt on the publisher returned well before the subscriber finished processing the messages. This means we were able to publish messages to the bus faster that we could process them. This could be a problem if you don’t expect any “lulls” in publishing which would allow the subscriber to catch up.</p>
<p>We can further illustrate the backlog by looking at the graph for the MtPubSubExample_TestSubscriber queue in the RabbitMQ management interface (found at <a href="http://localhost:15672/">http://localhost:15672/</a> – see <a href="../../06/masstransit-publish-subscribe-example/index.htm">this post</a> for details). You have to have the interface up and be watching the graph while your publisher/subscriber test is actually running:</p>
<p><a href="../../../wp-content/uploads/2014/08/image1.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb1.png" alt="image" width="441" height="166" border="0"></a></p>
<p>Here you can see that the publisher hit a peak of 200 messages per second, while the subscriber sustained a steady rate of about 40 messages per second.</p>
<p>With a spike and then nothing for a time, perhaps slow and steady wins the race for our subscriber. Try 10,000 messages and watch the RabbitMQ graphs:</p>
<p><a href="../../../wp-content/uploads/2014/08/image2.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb2.png" alt="image" width="710" height="319" border="0"></a></p>
<p>This more dramatically illustrates the problem. The number of queued messages (top graph) is continuing to go up with no relief in sight. And the bottom graph shows we’re publishing messages at a rate of 259 per second, but we only process them at a rate of around 40 per second. Again, since the publish storm eventually passes, the subscriber does <em>eventually</em> catch up.</p>
<p>Let’s look at a couple ways we can increase the throughput of our subscriber.</p>
<h2>Option 1: Increase the Prefetch Count</h2>
<p>If you do the math on the rate of 40 messages per second that we observe, you will arrive at what appears to be 10 simultaneous threads processing messages (each message takes a quarter of a second). However, the default number of threads that MassTransit can use for consumers is actually the number of processors in your machine multiplied by 4. So, on my 8 core machine, that would be 32 threads. Why are we only observing 10?</p>
<p>The reason is due to the number of messages the RabbitMQ transport will “prefetch” from the queue. The default for this is 10, so we can only process 10 messages simultaneously. To increase this, you include a “prefetch=X” parameter in the query string of the queue URL. For example:</p>
<pre class="brush: csharp; toolbar: false; highlight: [2];">x.UseRabbitMq();
x.ReceiveFrom("rabbitmq://localhost/MtPubSubExample_" + queueName + "?prefetch=32");
</pre>
<p>Now that this is set to 32 to match the maximum thread of 32, we should observe a 128 message per second processing rate.</p>
<h2>Option 2: Increase the Thread Count</h2>
<p>We can also tell MassTransit to allow more threads to be used to consume messages. You put a call to SetConcurrentConsumerLimit in your bus initialization code. Below we bump the thread count to 64 (doubling the number of threads):</p>
<pre class="brush: csharp; toolbar: false; highlight: [13];">using Configuration;
using MassTransit;
using System;

namespace TestSubscriber
{
  class Program
  {
    static void Main(string[] args)
    {
      var bus = BusInitializer.CreateBus("TestSubscriber", x =&gt;
      {
        x.SetConcurrentConsumerLimit(64);
        x.Subscribe(subs =&gt;
        {
          subs.Consumer&lt;SomethingHappenedConsumer&gt;().Permanent();
        });
      });

      Console.ReadKey();

      bus.Dispose();
    }
  }
}
</pre>
<p>Don’t forget to also increase your prefetch setting (see option 1 above) to match. Now we’re processing 256 messages per second! That’s pretty close to our 259 per second we observed being published onto the bus.</p>
<p>However, at some point, your machine is going to run out of processing power. Perhaps it already has. We’re just sleeping the thread here for 250ms, so the ceiling is pretty high on how many threads we could run, but if there was real processing happening, we might be maxing out the CPU on the machine. As any good architect knows, don’t scale up, scale out!</p>
<h2>Option 3: Run More Subscribers</h2>
<p>Try dumping another 10,000 messages onto the bus. While you’ve got one subscriber running, you can simply execute another instance of the TestSubscriber executable and it will start processing messages too, effectively doubling your processing rate!</p>
<p>Having multiple subscribers connected to the <em>same</em> RabbitMQ queue is what’s called the “competing consumer” pattern. RabbitMQ will make sure each consumer gets unique messages in essentially a round-robin fashion.</p>
<p>Again, however, if we’re already maxing out the CPU on the subscriber machine, what we really need is to run another subscriber on <em>another</em> machine with its own available resources. If we use our current example code, however, we <em>will</em> get duplicate messages because each machine is connecting to localhost for its RabbitMQ instance. (Don’t forget to make sure <a href="../../07/creating-a-rabbitmq-cluster-for-use-with-masstransit/index.htm">all the RabbitMQ instances are in a cluster</a>.) Since each instance will have its own queue, then MassTransit will treat each queue as a unique consumer as opposed to competing consumers. Each queue will get a copy of the same message routed to it. Remember this diagram from our clustering article illustrating how each machine has its own RabbitMQ instance:</p>
<p><img loading="lazy" src="../../../wp-content/uploads/2014/07/RabbitMQ-Cluster-Diagram-New-Page.png" alt="" width="698" height="402"></p>
<p>Clearly, this is not what we want. In order to be competing consumers, the two subscriber processes must be connected to the <em>same</em> RabbitMQ instance and queue. What we need is an architecture more like the following:</p>
<p><a href="../../../wp-content/uploads/2014/08/cluster-2.png"><img loading="lazy" style="display: inline;" title="cluster-2" src="../../../wp-content/uploads/2014/08/cluster-2_thumb.png" alt="cluster-2" width="698" height="604"></a></p>
<p>Obviously, this makes the RabbitMQ server a single point of failure and a dependency for the two subscriber machines. If high availability is a requirement, then you would need to look into some type of virtual IP address based clustering (like <a href="http://www.keepalived.org/" target="_blank">keepalived</a> on Linux or <a href="http://technet.microsoft.com/en-us/library/cc754833(v=ws.10).aspx" target="_blank">NLB</a> on Windows). You will also need to implement <a href="http://www.rabbitmq.com/ha.html" target="_blank">highly available queues</a> in RabbitMQ so that the queues are replicated across your multiple instances.</p>
<h3>Implementing the Centralized RabbitMQ Server</h3>
<p>Obviously, the first step is to install RabbitMQ on a new server. We’ll call this machine “submaster” (for subscription master). Instructions for installing RabbitMQ can be found in <a href="../../06/masstransit-publish-subscribe-example/index.htm">this blog post</a>. Then, join the RabbitMQ instance on submaster to a cluster with the RabbitMQ instance on your publisher machine. Instructions for creating a RabbitMQ cluster can be found in <a href="../../07/creating-a-rabbitmq-cluster-for-use-with-masstransit/index.htm">this blog post</a>. We should have these nodes in our RabbitMQ cluster:</p>
<p><a href="../../../wp-content/uploads/2014/08/image3.png"><img loading="lazy" style="margin: 0px; display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb3.png" alt="image" width="160" height="216" border="0"></a></p>
<p>In order to connect to a remote RabbitMQ instance, we need to do some security housekeeping. First, we need to modify the Windows Firewall on the submaster machine to allow in the default RabbitMQ port of 5672. Next, we need to create a new user in RabbitMQ that the subscriber can use to login. We’ll call it “testsubscriber” and give it a password of “test”. On the Admin tab of the RabbitMQ management interface, you can begin adding a new user:</p>
<p><a href="../../../wp-content/uploads/2014/08/image4.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb4.png" alt="image" width="739" height="442" border="0"></a></p>
<p>Type in the username, password, administrator tag, and click Add user. Initially, the user won’t have any permissions:</p>
<p><a href="../../../wp-content/uploads/2014/08/image5.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb5.png" alt="image" width="469" height="112" border="0"></a></p>
<p>Click on the testsubscriber user and then click “Set permission” as seen here:</p>
<p><a href="../../../wp-content/uploads/2014/08/image6.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb6.png" alt="image" width="350" height="314" border="0"></a></p>
<p>Now we need to modify our Configuration.BusInitializer class to be able to connect to a specific machine name instead of hard-coding localhost as well as utilize our username and password. We’ll have it read these items from our App.config. Remember, our publisher can still use localhost (which doesn’t require username/password), but our subscriber needs to connect to the submaster machine with some credentials.</p>
<p>First, add a reference to System.Configuration to the Configuration project. Then modify the BusInitializer class to allow reading the machine name, username, and password from configuration:</p>
<pre class="brush: csharp; toolbar: false; highlight: [5,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,42,43,44,45,46];">using MassTransit;
using MassTransit.BusConfigurators;
using MassTransit.Log4NetIntegration.Logging;
using System;
using System.Configuration;

namespace Configuration
{
  public class BusInitializer
  {
    public static IServiceBus CreateBus(string queueName, Action&lt;ServiceBusConfigurator&gt; moreInitialization)
    {
      Log4NetLogger.Use();
      var bus = ServiceBusFactory.New(x =&gt;
      {
        var serverName = GetConfigValue("rabbitmq-server-name", "localhost");
        var userName = GetConfigValue("rabbitmq-username", "");
        var password = GetConfigValue("rabbitmq-password", "");
        var queueUri = "rabbitmq://" + serverName + "/MtPubSubExample_" + queueName + "?prefetch=64";

        if (userName != "")
        {
          x.UseRabbitMq(r =&gt;
          {
            r.ConfigureHost(new Uri(queueUri), h =&gt;
            {
              h.SetUsername(userName);
              h.SetPassword(password);
            });
          });
        }
        else
          x.UseRabbitMq();

        x.ReceiveFrom(queueUri);
        moreInitialization(x);
      });

      return bus;
    }

    private static string GetConfigValue(string key, string defaultValue)
    {
      string value = ConfigurationManager.AppSettings[key];
      return string.IsNullOrEmpty(value) ? defaultValue : value;
    }
  }
}
</pre>
<p>Since we’re only going to deviate from the default of localhost on our subscriber, open the TestSubscriber project and add the following lines into the App.config:</p>
<pre class="brush: xml; toolbar: false; highlight: [7,8,9,10,11];">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;startup&gt;
    &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" /&gt;
  &lt;/startup&gt;

  &lt;appSettings&gt;
    &lt;add key="rabbitmq-server-name" value="submaster" /&gt;
    &lt;add key="rabbitmq-username" value="testsubscriber" /&gt;
    &lt;add key="rabbitmq-password" value="test" /&gt;
  &lt;/appSettings&gt;
&lt;/configuration&gt;
</pre>
<h3>Running the Test</h3>
<p>On my dev machine, I fired up one instance of TestSubscriber with the above configuration. Then, on the publisher machine, I started up both TestPublisher and TestSubscriber. Here’s it running after pushing 100,000 messages onto the bus:</p>
<p><a href="../../../wp-content/uploads/2014/08/Capture.png"><img loading="lazy" style="display: inline; background-image: none;" title="Capture" src="../../../wp-content/uploads/2014/08/Capture_thumb.png" alt="Capture" width="747" height="295" border="0"></a></p>
<p>Lots of blinking lights. The more interesting thing is to observe the messages processed per second in RabbitMQ:</p>
<p><a href="../../../wp-content/uploads/2014/08/image7.png"><img loading="lazy" style="display: inline; background-image: none;" title="image" src="../../../wp-content/uploads/2014/08/image_thumb7.png" alt="image" width="690" height="155" border="0"></a></p>
<h1>Wrap Up</h1>
<p>So now you can see how it would be possible to scale out your message processing. Perhaps in a future post, we’ll take a look at leveraging the cloud. It should be possible to monitor the number of messages in your queue and spin up new cloud workers to pick up the slack and then shut them down when the queue quiets back down. Until then…</p>
									
																	</div>
								<!-- end .entry-content -->
								
																			<footer class="entry-meta post-tags">
												<a href="../../../tag/masstransit/index.htm" rel="tag">MassTransit</a>, <a href="../../../tag/rabbitmq/index.htm" rel="tag">RabbitMQ</a>, <a href="../../../tag/service-bus/index.htm" rel="tag">Service Bus</a>, <a href="../../../tag/soa/index.htm" rel="tag">SOA</a>											</footer>
											<!-- end .entry-meta -->
																	</article>
							<!-- end .hentry -->
							
							<aside class="about-author">
	<h3>ABOUT THE AUTHOR</h3>
	
	<div class="row-fluid author-bio">
		<div class="span2 author-img">
			<a href="../../../author/davidprothero-com/index.htm">
				<img alt='david@prothero.com' src='../../../avatar/a0c880ad31c66856b29f53e6c32d688b.jpeg?s=226&#038;d=mm&#038;r=g' srcset='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-1.jpeg 2x?s=452&#038;d=mm&#038;r=g 2x' class='avatar avatar-226 photo' height='226' width='226' loading='lazy'>			</a>
		</div>
		<!-- end .author-img -->
		
		<div class="span10 author-info">
			<h4 class="author-name">david@prothero.com</h4>
			
			<p>
				I have been providing technical leadership for companies for over 15 years. However, my software engineering experience extends back over 25 years. Currently, I am a Developer Educator for Twilio. Prior to that, I served as both IT Director and Software Engineering Director for Therapeutic Research Center (TRC). I guided the company from a print-based newsletter company to an online information services company.			</p>
		</div>
		<!-- end .author-info -->
	</div>
	<!-- end .author-bio -->
</aside>
<!-- end .about-author -->							
							<nav class="row-fluid nav-single">
								<div class="span6 nav-previous">
									<h4>PREVIOUS POST</h4><a href="../../07/error-handling-in-masstransit-consumers/index.htm" rel="prev"><span class="meta-nav">&#8592;</span> Error Handling in MassTransit Consumers</a>								</div>
								<!-- end .nav-previous -->
								
								<div class="span6 nav-next">
									<h4>NEXT POST</h4><a href="../monitoring-rabbitmq/index.htm" rel="next">Monitoring RabbitMQ <span class="meta-nav">&#8594;</span></a>								</div>
								<!-- end .nav-next -->
							</nav>
							<!-- end .nav-single -->
							
							
<div id="comments" class="comments-area">
					<h2 class="comments-title">
					7 Comments <span class="on">&#8594;</span> <span>Scaling Out Subscribers With MassTransit</span>				</h2>
				<!-- end .comments-title -->
				
				<ol class="commentlist">
										
					<li class="comment even thread-even depth-1" id="li-comment-32">
						<article id="comment-32" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/949d9cdc11176d07c35c38ff7bfd1593.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/949d9cdc11176d07c35c38ff7bfd1593-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Faisal Nadeem </cite><a href="index.htm#comment-32"><time datetime="2015-01-11T00:16:00+00:00">January 11, 2015 at 12:16 am</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Great tutorial David, it helped me a lot. </p>
<p>Though i have one question about Runtime Services. </p>
<p>My Runtime Services are also running on &#8220;submaster&#8221;, how can i use credientials for this server while using Subscription Service from Publisher.<br>
When i call UseSubscriptionService, how can i authenticate?</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					<ol class="children">
					
					<li class="comment odd alt depth-2" id="li-comment-33">
						<article id="comment-33" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-2.jpeg?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-3.jpeg 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">dprothero </cite><a href="index.htm#comment-33"><time datetime="2015-01-11T05:21:00+00:00">January 11, 2015 at 5:21 am</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Runtime Services are only necessary for MSMQ. I do not have any experience using MassTransit with MSMQ. When using RabbitMQ, there&#8217;s no need for the Runtime Services because RabbitMQ handles all of the subscription persistence for you. Also, FYI, MSMQ support is being dropped in MassTransit 3.</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					<ol class="children">
					
					<li class="comment even depth-3" id="li-comment-34">
						<article id="comment-34" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/949d9cdc11176d07c35c38ff7bfd1593.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/949d9cdc11176d07c35c38ff7bfd1593-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Faisal Nadeem </cite><a href="index.htm#comment-34"><time datetime="2015-01-11T07:41:00+00:00">January 11, 2015 at 7:41 am</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Thanks David. Actually i need to check nodes health and show to client. For that i was using Health Services, and Health Services can only be used with Runtime Services (Subscription Services).</p>
<p>Any idea how can i store nodes health in database?</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					<ol class="children">
					
					<li class="comment odd alt depth-4" id="li-comment-35">
						<article id="comment-35" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-2.jpeg?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/a0c880ad31c66856b29f53e6c32d688b-3.jpeg 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">dprothero </cite><a href="index.htm#comment-35"><time datetime="2015-01-11T13:56:00+00:00">January 11, 2015 at 1:56 pm</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Again, I haven&#8217;t used any of MT&#8217;s runtime services, including the health service. Personally, I use Nagios for infrastructure monitoring (<a href="http://www.nagios.org/" rel="nofollow ugc">http://www.nagios.org/</a>). Perhaps more important than the health of an individual node is the health of your queues. Take a look at <a href="../monitoring-rabbitmq/index.htm" rel="nofollow ugc">http://looselycoupledlabs.com/2014/08/monitoring-rabbitmq/</a> for how to keep an eye on your queues. For services, I usually setup in Nagios what are called &#8220;passive checks&#8221;&#8230; Nagios doesn&#8217;t actively ping the services, but expects the services to &#8220;report in&#8221; on a set interval.</p>
<p>You could roll your own simple variation of this. Have each note report in to a database to say &#8220;I&#8217;m still alive as of this timestamp&#8221; and then write a centralized script  or program that monitors that database for stale report times (the assumption being if a report time is over X minutes old, then the node is having problems).</p>
<p>Good luck!</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					<ol class="children">
					
					<li class="comment even depth-5" id="li-comment-36">
						<article id="comment-36" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/949d9cdc11176d07c35c38ff7bfd1593.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/949d9cdc11176d07c35c38ff7bfd1593-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Faisal Nadeem </cite><a href="index.htm#comment-36"><time datetime="2015-01-11T16:24:00+00:00">January 11, 2015 at 4:24 pm</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>Thanks David, actually i have setup the health services with help of your post &#8220;RabbirMQ Monitoring&#8221;.</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
					
					<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-60">
						<article id="comment-60" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/f5c12dc4d44c3a9de33596e3c8a133ac.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/f5c12dc4d44c3a9de33596e3c8a133ac-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Niklas Gåfvels </cite><a href="index.htm#comment-60"><time datetime="2015-09-01T10:08:00+00:00">September 1, 2015 at 10:08 am</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>I don&#8217;t thing that you have to connect to the same RabbitMQ instance when using competing consumers. The two subscriber processes can be connected to different RabbitMQ instances in the cluster using the same queue name.</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
					
					<li class="comment even thread-even depth-1" id="li-comment-297">
						<article id="comment-297" class="comment">
							<header class="comment-meta comment-author vcard">
								<img alt='' src='../../../avatar/347c7b0395570bd437dfa1f9865e1863.png?s=75&#038;d=mm&#038;r=g' srcset='../../../avatar/347c7b0395570bd437dfa1f9865e1863-1.png 2x?s=150&#038;d=mm&#038;r=g 2x' class='avatar avatar-75 photo' height='75' width='75' loading='lazy'><cite class="fn">Rebecca Powell </cite><a href="index.htm#comment-297"><time datetime="2020-05-04T08:03:00+00:00">May 4, 2020 at 8:03 am</time></a>							</header>
							<!-- end .comment-meta -->
							
														
							<section class="comment-content comment">
								<p>I&#8217;m really confused by this line:</p>
<blockquote><p>If we use our current example code, however, we will get duplicate messages because each machine is connecting to localhost for its RabbitMQ instance.</p></blockquote>
<p>Assuming we have two app servers and one RMQ server, and both competing consumers are connecting to the same queue name on the single RMQ server, why do we need a cluster?</p>
								
															</section>
							<!-- end .comment-content -->
							
							<div class="reply">
															</div>
							<!-- end .reply -->
						</article>
						<!-- end #comment-## -->
					</li><!-- #comment-## -->
				</ol>
				<!-- end .commentlist -->
				
								
											<p class="nocomments">Comments are closed.</p>
										
	</div>
<!-- end #comments -->								</div>
		<!-- end .blog-single -->
	</div>
	<!-- end #content -->
</div>
<!-- end #primary -->

			</div>
			<!-- end .row .row-fluid -->
        </section>
        <!-- end #main -->
		
        <footer class="site-footer wrapper" role="contentinfo">
			<div class="row">
				<div id="supplementary" class="row-fluid">
									</div>
				<!-- end #supplementary -->
				
				<div class="site-info">
					Copyright © 2014 by David Prothero
All rights reserved.				</div>
				<!-- end .site-info -->
			</div>
			<!-- end .row -->
        </footer>
        <!-- end .site-footer -->
    </div>
    <!-- end #PAGE -->
	
	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-1922425-8', 'auto');
  ga('send', 'pageview');

</script>
<script type="text/javascript">
  SyntaxHighlighter.all();
</script><script type='text/javascript' src='../../../wp-includes/js/comment-reply.min.js?ver=5.8.6' id='comment-reply-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/detectmobilebrowser.js' id='detectmobilebrowser-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/modernizr.js' id='modernizr-js'></script>
<script type='text/javascript' src='../../../wp-includes/js/imagesloaded.min.js?ver=4.1.4' id='imagesloaded-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.fitvids.js' id='fitvids-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/google-code-prettify/prettify.js' id='google-code-prettify-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.uniform.min.js' id='uniform-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.flexslider-min.js' id='flexslider-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/mediaelement/mediaelement-and-player.min.js' id='mediaelement-and-player-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.isotope.min.js' id='isotope-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.fancybox-1.3.4.pack.js' id='fancybox-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.masonry.min.js' id='masonry-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.history.js' id='history-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/js-url.min.js' id='js-url-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquerypp.custom.js' id='jquerypp-custom-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/gamma.js' id='gamma-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/main.js' id='main-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/jquery.validate.min.js' id='validate-js'></script>
<script type='text/javascript' src='../../../wp-content/themes/read-v4-2-4/js/send-mail.js' id='send-mail-js'></script>
<script type='text/javascript' src='../../../wp-includes/js/wp-embed.min.js?ver=5.8.6' id='wp-embed-js'></script>
</body>
</html>