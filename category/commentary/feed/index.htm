<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Commentary &#8211; Loosely Coupled Labs</title>
	<atom:link href="https://looselycoupledlabs.com/category/commentary/feed/" rel="self" type="application/rss+xml" />
	<link>https://looselycoupledlabs.com</link>
	<description>**ARCHIVED** A Blog Loosely Related to System Architecture by David Prothero **ARCHIVED**</description>
	<lastBuildDate>Mon, 21 Mar 2016 17:17:56 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.6</generator>
	<item>
		<title>Meet Your Friendly, Neighborhood .NET Twilion</title>
		<link>https://looselycoupledlabs.com/2016/03/meet-your-friendly-neighborhood-net-twilion/</link>
		
		<dc:creator><![CDATA[david@prothero.com]]></dc:creator>
		<pubDate>Mon, 21 Mar 2016 17:17:56 +0000</pubDate>
				<category><![CDATA[Commentary]]></category>
		<category><![CDATA[Twilio]]></category>
		<guid isPermaLink="false">http://looselycoupledlabs.com/?p=284</guid>

					<description><![CDATA[I have a new role and I&#8217;m very excited about it. I am now a Developer Educator for Twilio. Twilio takes care of the messy telecom hardware and exposes a globally available cloud API that developers can interact with to build intelligent and complex communications systems. To get this role, one of the things I... <a class="more-link" href="https://looselycoupledlabs.com/2016/03/meet-your-friendly-neighborhood-net-twilion/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>I have a new role and I&#8217;m very excited about it. I am now a Developer Educator for <a href="https://twilio.com" target="_blank">Twilio</a>. Twilio takes care of the messy telecom hardware and exposes a globally available cloud API that developers can interact with to build intelligent and complex communications systems. To get this role, one of the things I had to do was give a live demo of <em>something</em> (anything really). To illustrate how easy it was to work with the Twilio API, I utilized the SMS API to enable two-factor authentication in an ASP.NET MVC web app. The process of walking a bunch of developers (used to writing Python and JavaScript code on their MacBooks) through using Visual Studio was a lot of fun and I must have impressed because I got the job!</p>
<p><a href="http://bit.ly/twuts-social" target="_blank"><img loading="lazy" class="size-full wp-image-285 alignleft" src="http://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile.jpg" alt="Google_Profile" width="270" height="270" srcset="https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile.jpg 270w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile-150x150.jpg 150w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile-200x200.jpg 200w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile-57x57.jpg 57w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile-72x72.jpg 72w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile-114x114.jpg 114w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/Google_Profile-144x144.jpg 144w" sizes="(max-width: 270px) 100vw, 270px" /></a>On my first day, I got introduced to a novel new approach to technical and API documentation. Today, they are being officially announced. They&#8217;re called <a href="http://bit.ly/twuts-social" target="_blank">Tutorials </a>which sounds simple enough, but instead of putting the narrative first, they put the code first because, let&#8217;s face it, that&#8217;s what us developers are the most interested in seeing anyway. Rather than try to describe it to you, I encourage you to go check it out. Here&#8217;s a great tutorial on how to <a href="http://bit.ly/twuts-cs" target="_blank">automate an SMS-based workflow</a> using C# and ASP.NET MVC. And here&#8217;s another one on how to use <a href="http://bit.ly/1UxNllQ" target="_blank">masked phone numbers</a> (just like they do at Airbnb).</p>
<p><img loading="lazy" class="wp-image-288 alignright" src="http://looselycoupledlabs.com/wp-content/uploads/2016/03/sms-emp-dir.png" alt="sms-emp-dir" width="259" height="460" srcset="https://looselycoupledlabs.com/wp-content/uploads/2016/03/sms-emp-dir.png 562w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/sms-emp-dir-169x300.png 169w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/sms-emp-dir-150x267.png 150w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/sms-emp-dir-400x712.png 400w, https://looselycoupledlabs.com/wp-content/uploads/2016/03/sms-emp-dir-200x356.png 200w" sizes="(max-width: 259px) 100vw, 259px" />I am excited to be joining the team that puts these excellent tutorials together. I&#8217;m currently working on a company directory that you can query using SMS and get back a photo, full name, email, and phone number of an employee in your company. I created a directory for the fictitious company Marvel Universe, which you can give a spin by sending a text message to: +1-209-337-3517. (Hint, make your text message the name of your favorite Marvel comic hero.) When you do, you&#8217;ll get back the contact info as an MMS response.</p>
<p>&nbsp;</p>
<p>That&#8217;s just a preview. I&#8217;ll write another blog post once that tutorial has been published. And, you know I&#8217;m going to find a way to use MassTransit with the Twilio API&#8217;s, so stay tuned&#8230;</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>MassTransit versus NServiceBus: FIGHT!</title>
		<link>https://looselycoupledlabs.com/2014/11/masstransit-versus-nservicebus-fight/</link>
					<comments>https://looselycoupledlabs.com/2014/11/masstransit-versus-nservicebus-fight/#comments</comments>
		
		<dc:creator><![CDATA[david@prothero.com]]></dc:creator>
		<pubDate>Sun, 16 Nov 2014 23:01:50 +0000</pubDate>
				<category><![CDATA[Commentary]]></category>
		<category><![CDATA[MassTransit]]></category>
		<category><![CDATA[NServiceBus]]></category>
		<category><![CDATA[Service Bus]]></category>
		<category><![CDATA[SOA]]></category>
		<guid isPermaLink="false">http://looselycoupledlabs.com/?p=244</guid>

					<description><![CDATA[I often get asked: &#8220;which is better, MassTransit or NServiceBus?&#8221; It&#8217;s a perfectly reasonable question for an outsider looking to get started with message-based SOA on .NET to ask. However, as is usually the case with the &#8220;which is better&#8221; question for any technology, the answer is the ubiquitous (and exasperating) &#8220;it depends.&#8221; Goals and... <a class="more-link" href="https://looselycoupledlabs.com/2014/11/masstransit-versus-nservicebus-fight/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>I often get asked: &#8220;which is better, <a href="http://masstransit-project.com/" target="_blank">MassTransit</a> or <a href="http://particular.net/NServiceBus" target="_blank">NServiceBus</a>?&#8221; It&#8217;s a perfectly reasonable question for an outsider looking to get started with message-based SOA on .NET to ask. However, as is usually the case with the &#8220;which is better&#8221; question for any technology, the answer is the ubiquitous (and exasperating) &#8220;it depends.&#8221;<span id="more-244"></span></p>
<h1>Goals and Disclaimers</h1>
<p>This post is not a deep-dive comparison of the two frameworks. To do so would be extremely time consuming and I’m not sure would add a lot of value as the use cases for these frameworks are so broad. Instead, I hope to offer some general guidance on how to approach your own comparison research (with links to more details where appropriate).</p>
<p>The other goal for this post is to hopefully solicit feedback from others to improve the quality of advice offered here. You may want to check back frequently for updates and interesting conversation. Keep things civil, however, please. (The “FIGHT&#8221;!” in the post title is just my own attempt at journalistic sensationalism.)</p>
<p>First, the disclaimers… I’ve used MassTransit for quite some time and obviously if you look at the other <a href="http://looselycoupledlabs.com/tag/masstransit/" target="_blank">posts on this blog</a>, you can see there’s a definite MassTransit bias. But there’s a twist! I actually do some (paid) work for <a href="http://particular.net/" target="_blank">Particular Software</a> (makers of NServiceBus) writing documentation for their products. Particular is not paying me to write this blog post, however. If this post feels biased to you in any way, I apologize. We’re all human. On the other hand, the level of exposure I have to both frameworks does put me in a good position to publish some thoughts on the differences. Proceed with caution!</p>
<h1>MassTransit versus NServiceBus</h1>
<h2>Common Qualities</h2>
<p>Both frameworks have these qualities in common (in broad strokes):</p>
<ul>
<li>The projects were started and are actively maintained by wicked smart SOA experts. [<a href="https://github.com/orgs/MassTransit/people" target="_blank">MT</a> | <a href="http://particular.net/leadership" target="_blank">NSB</a>]</li>
<li>The code base is high quality, unit tested, and open to community contributions. [<a href="https://github.com/MassTransit/MassTransit" target="_blank">MT</a> | <a href="https://github.com/Particular/NServiceBus" target="_blank">NSB</a>]</li>
<li>There is a very responsive community. [<a href="https://groups.google.com/forum/#!forum/masstransit-discuss" target="_blank">MT</a> | <a href="https://groups.google.com/forum/#!forum/particularsoftware" target="_blank">NSB</a>]</li>
<li>They support the most common messaging patterns (request/response, publish/subscribe, sagas, etc.). [<a href="http://docs.masstransit-project.com/en/latest/overview/index.html" target="_blank">MT</a> | <a href="http://docs.particular.net/nservicebus/architectural-principles" target="_blank">NSB</a>]</li>
<li>Both support your choice of IoC Container. [<a href="http://docs.masstransit-project.com/en/latest/configuration/containers.html" target="_blank">MT</a> | <a href="http://docs.particular.net/nservicebus/containers" target="_blank">NSB</a>]</li>
<li>Exceptions during message processing are handled and messages re-queued to be retried. [<a href="http://automatonymous.readthedocs.org/en/latest/overview/valueadd.html#retries-poision-messages" target="_blank">MT</a> | <a href="http://docs.particular.net/nservicebus/second-level-retries" target="_blank">NSB</a>]</li>
</ul>
<p>The bottom line is these are both very solid frameworks.</p>
<h2>So What’s Different?</h2>
<p>It’s been mentioned in other places many times before, but here are the basic differences if you haven’t seen them (again in broad strokes):</p>
<ul>
<li>While both are open source, only MassTransit is free to use in production. Production use of NServiceBus requires a commercial license. [<a href="https://github.com/MassTransit/MassTransit/blob/develop/LICENSE" target="_blank">MT</a> | <a href="http://particular.net/licensing" target="_blank">NSB</a>]</li>
<li>MassTransit support is strictly community-based through it’s Google Group (where the founders are extremely active) whereas NServiceBus offers a commercial support option. [<a href="http://docs.masstransit-project.com/en/latest/installation/help.html" target="_blank">MT</a> | <a href="http://particular.net/support" target="_blank">NSB</a>]</li>
<li>NServiceBus has an <a href="http://particular.net/service-platform" target="_blank">entire platform</a> of other (commercial) tools supporting it.</li>
<li>NServiceBus’ documentation and the platform itself tends to hold your hand a little more and try to steer you down the path of good practices. (You can still shoot yourself in the foot, they just try to make it harder.)</li>
</ul>
<p>Obviously, there are many other, more detailed, differences but these are the major factors most people are considering when getting started.</p>
<h2>The Automotive Analogy</h2>
<p>Let’s use an automotive analogy and say MassTransit is a base model Honda Accord. Very solid, reliable vehicle. Always highly recommended by the auto experts and consumer groups. It will get you from point A to point B in a predictable manner. There are even upgraded components you can get that are designed to work well with it to give you a better experience.</p>
<p>If MassTransit is a Honda Accord, then NServiceBus is a Lexus IS350. All the same attributes as the Honda, but with a lot more capabilities right in the package. It’s a lot more comfortable, has more horsepower, and can do some pretty impressive things. Could you make the Honda do all the things that a Lexus could do? Possibly, but you’re going to be working in the garage a long time to upgrade it (or paying a custom car shop a lot of money to do so). It would be a very custom, one-of-a-kind vehicle, whereas the Lexus was designed holistically to have all its features work together in a reliable and safe package.</p>
<h2>A Concrete Example</h2>
<p>Let me give you a concrete example of some of the additional features you would get “in the box” from NServiceBus versus MassTransit. Take the example of working with a queuing system like RabbitMQ or Azure Service Bus that does not support distributed transactions. If you have a business process that needs to be highly reliable <em>and</em> consistent, then you have to deal with this lack of distributed transaction support. Consider this simple example:</p>
<ol>
<li>You take the message off the queue.</li>
<li>You do some database work.</li>
<li>Before you can commit your database work, your server crashes.</li>
</ol>
<p>In this example, you will lose data because the message will no longer be in the queue, but your database work was not persisted. This is why both MassTransit and NServiceBus don&#8217;t actually remove the message from the queue until your handler has completed successfully. So the scenario could go like this:</p>
<ol>
<li>You peek at the next message on the queue.</li>
<li>You do your database work and it commits.</li>
<li>You go to remove the message from the queue, but… oops… the server crashes.</li>
</ol>
<p>Now the message is still in the queue and will be processed again. This could lead to duplicate data. “No problem,” you say, “just keep track of the messages that are processed in the database.”</p>
<ol>
<li>You peek at the next message on the queue.</li>
<li>You do your database work.</li>
<li>In the same db transaction, you record the message id so you know it’s been processed.</li>
<li>Commit the database transaction.</li>
<li>You go to remove the message from the queue, but… oops… the server crashes.</li>
</ol>
<p>Now we’re okay because the logic in your handler can check to see if the message id has already been processed. We’re utilizing the transaction capability of your database to help us out here.</p>
<p>Problem solved, right? Actually, not quite… what if you want to publish another message after finishing the database work? That won’t be involved in the same transaction and now you risk either publishing incorrect information to the service bus or not publishing it at all depending on what order you do your database commit and message publishing. Here’s a great talk by Udi Dahan about this very problem and what the full end-to-end solution for it looks like:</p>
<div style="width: 500px; font-size: 11px;"><iframe loading="lazy" style="margin-bottom: 0; padding-bottom: 0;" src="//player.vimeo.com/video/111998645" width="500" height="281" frameborder="0" allowfullscreen="allowfullscreen"></iframe><br />Used with permission. Please visit <a href="http://particular.net/adsd" target="_blank">Particular&#8217;s site</a> for more information on the Advanced Distributed Systems Design course that this video is from.</div>
<p>The point that I am trying to make here is that with MassTransit, you have to code for these scenarios. This isn’t always necessary given the business requirements. If the occasional lost message or inconsistency in the database is not a big deal, then you wouldn’t need to add that logic and MT or NSB would do the job for you just fine.</p>
<p>However, if you do need this, then NServiceBus offers it out of the box. It also offers deferred message retry and publishing out of the box. There’s just a number of scenarios that it handles for you where with MassTransit you have to either roll your own or wire up another component (some of which are built by the MassTransit guys).</p>
<h2>Bottom Line</h2>
<p>If your needs don’t require compromise-free reliability and consistency and you are on a tight budget, then definitely look at MassTransit. If you do require compromise-free reliability and consistency, then you need to weigh the pros and cons of building the additional code necessary on top of MassTransit versus paying for NServiceBus but getting all of the functionality you need in one package.</p>
<p>Now it’s your turn. Let me know where I dropped the ball, where I didn’t elaborate enough, or where you think I’ve got it just all wrong…</p>
]]></content:encoded>
					
					<wfw:commentRss>https://looselycoupledlabs.com/2014/11/masstransit-versus-nservicebus-fight/feed/</wfw:commentRss>
			<slash:comments>8</slash:comments>
		
		
			</item>
	</channel>
</rss>
